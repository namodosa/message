plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    // Query DSL
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'java'
    id 'war'
}

group = 'com.namolog'
version = '1.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'
    implementation 'org.modelmapper:modelmapper:2.3.7'
    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'
    // Query DSL
    implementation 'com.querydsl:querydsl-jpa'
    // validation
    compile 'javax.validation:validation-api:2.0.1.Final'
    // 외부 라이브러리
    compile fileTree(dir: 'lib', include: ['*.jar'])
    // ConfigurationProperties application.yml
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    //
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // for test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
//    testCompileOnly 'org.projectlombok:lombok'
//    testAnnotationProcessor 'org.projectlombok:lombok'
}

test {
    useJUnitPlatform()
}

// Query DSL
def querydslDir = "$buildDir/generated/querydsl"
//def querydslDir = "src/main/generated"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
// Query DSL